// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lasso.proto

#ifndef PROTOBUF_lasso_2eproto__INCLUDED
#define PROTOBUF_lasso_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace stradsvm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_lasso_2eproto();
void protobuf_AssignDesc_lasso_2eproto();
void protobuf_ShutdownFile_lasso_2eproto();

class pairt;
class triplepair;
class bcwmsg;

// ===================================================================

class pairt : public ::google::protobuf::Message {
 public:
  pairt();
  virtual ~pairt();

  pairt(const pairt& from);

  inline pairt& operator=(const pairt& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pairt& default_instance();

  void Swap(pairt* other);

  // implements Message ----------------------------------------------

  pairt* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pairt& from);
  void MergeFrom(const pairt& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline ::google::protobuf::int64 vid() const;
  inline void set_vid(::google::protobuf::int64 value);

  // required double value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline double value() const;
  inline void set_value(double value);

  // optional double pg = 3;
  inline bool has_pg() const;
  inline void clear_pg();
  static const int kPgFieldNumber = 3;
  inline double pg() const;
  inline void set_pg(double value);

  // @@protoc_insertion_point(class_scope:stradsvm.pairt)
 private:
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_pg();
  inline void clear_has_pg();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 vid_;
  double value_;
  double pg_;
  friend void  protobuf_AddDesc_lasso_2eproto();
  friend void protobuf_AssignDesc_lasso_2eproto();
  friend void protobuf_ShutdownFile_lasso_2eproto();

  void InitAsDefaultInstance();
  static pairt* default_instance_;
};
// -------------------------------------------------------------------

class triplepair : public ::google::protobuf::Message {
 public:
  triplepair();
  virtual ~triplepair();

  triplepair(const triplepair& from);

  inline triplepair& operator=(const triplepair& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const triplepair& default_instance();

  void Swap(triplepair* other);

  // implements Message ----------------------------------------------

  triplepair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const triplepair& from);
  void MergeFrom(const triplepair& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 vid = 1;
  inline bool has_vid() const;
  inline void clear_vid();
  static const int kVidFieldNumber = 1;
  inline ::google::protobuf::int64 vid() const;
  inline void set_vid(::google::protobuf::int64 value);

  // required double wspdot = 2;
  inline bool has_wspdot() const;
  inline void clear_wspdot();
  static const int kWspdotFieldNumber = 2;
  inline double wspdot() const;
  inline void set_wspdot(double value);

  // required double spspdot = 3;
  inline bool has_spspdot() const;
  inline void clear_spspdot();
  static const int kSpspdotFieldNumber = 3;
  inline double spspdot() const;
  inline void set_spspdot(double value);

  // @@protoc_insertion_point(class_scope:stradsvm.triplepair)
 private:
  inline void set_has_vid();
  inline void clear_has_vid();
  inline void set_has_wspdot();
  inline void clear_has_wspdot();
  inline void set_has_spspdot();
  inline void clear_has_spspdot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 vid_;
  double wspdot_;
  double spspdot_;
  friend void  protobuf_AddDesc_lasso_2eproto();
  friend void protobuf_AssignDesc_lasso_2eproto();
  friend void protobuf_ShutdownFile_lasso_2eproto();

  void InitAsDefaultInstance();
  static triplepair* default_instance_;
};
// -------------------------------------------------------------------

class bcwmsg : public ::google::protobuf::Message {
 public:
  bcwmsg();
  virtual ~bcwmsg();

  bcwmsg(const bcwmsg& from);

  inline bcwmsg& operator=(const bcwmsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const bcwmsg& default_instance();

  void Swap(bcwmsg* other);

  // implements Message ----------------------------------------------

  bcwmsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const bcwmsg& from);
  void MergeFrom(const bcwmsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline ::google::protobuf::int32 src() const;
  inline void set_src(::google::protobuf::int32 value);

  // optional int64 maxfeat = 2;
  inline bool has_maxfeat() const;
  inline void clear_maxfeat();
  static const int kMaxfeatFieldNumber = 2;
  inline ::google::protobuf::int64 maxfeat() const;
  inline void set_maxfeat(::google::protobuf::int64 value);

  // optional int64 samples = 3;
  inline bool has_samples() const;
  inline void clear_samples();
  static const int kSamplesFieldNumber = 3;
  inline ::google::protobuf::int64 samples() const;
  inline void set_samples(::google::protobuf::int64 value);

  // repeated .stradsvm.pairt newpairs = 4;
  inline int newpairs_size() const;
  inline void clear_newpairs();
  static const int kNewpairsFieldNumber = 4;
  inline const ::stradsvm::pairt& newpairs(int index) const;
  inline ::stradsvm::pairt* mutable_newpairs(int index);
  inline ::stradsvm::pairt* add_newpairs();
  inline const ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt >&
      newpairs() const;
  inline ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt >*
      mutable_newpairs();

  // repeated .stradsvm.pairt oldpairs = 5;
  inline int oldpairs_size() const;
  inline void clear_oldpairs();
  static const int kOldpairsFieldNumber = 5;
  inline const ::stradsvm::pairt& oldpairs(int index) const;
  inline ::stradsvm::pairt* mutable_oldpairs(int index);
  inline ::stradsvm::pairt* add_oldpairs();
  inline const ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt >&
      oldpairs() const;
  inline ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt >*
      mutable_oldpairs();

  // repeated .stradsvm.triplepair result = 6;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline const ::stradsvm::triplepair& result(int index) const;
  inline ::stradsvm::triplepair* mutable_result(int index);
  inline ::stradsvm::triplepair* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::stradsvm::triplepair >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::stradsvm::triplepair >*
      mutable_result();

  // optional double wterm = 7;
  inline bool has_wterm() const;
  inline void clear_wterm();
  static const int kWtermFieldNumber = 7;
  inline double wterm() const;
  inline void set_wterm(double value);

  // required int32 type = 8;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 8;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated double mwsp = 9 [packed = true];
  inline int mwsp_size() const;
  inline void clear_mwsp();
  static const int kMwspFieldNumber = 9;
  inline double mwsp(int index) const;
  inline void set_mwsp(int index, double value);
  inline void add_mwsp(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      mwsp() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_mwsp();

  // @@protoc_insertion_point(class_scope:stradsvm.bcwmsg)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_maxfeat();
  inline void clear_has_maxfeat();
  inline void set_has_samples();
  inline void clear_has_samples();
  inline void set_has_wterm();
  inline void clear_has_wterm();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 maxfeat_;
  ::google::protobuf::int64 samples_;
  ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt > newpairs_;
  ::google::protobuf::int32 src_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt > oldpairs_;
  ::google::protobuf::RepeatedPtrField< ::stradsvm::triplepair > result_;
  double wterm_;
  ::google::protobuf::RepeatedField< double > mwsp_;
  mutable int _mwsp_cached_byte_size_;
  friend void  protobuf_AddDesc_lasso_2eproto();
  friend void protobuf_AssignDesc_lasso_2eproto();
  friend void protobuf_ShutdownFile_lasso_2eproto();

  void InitAsDefaultInstance();
  static bcwmsg* default_instance_;
};
// ===================================================================


// ===================================================================

// pairt

// required int64 vid = 1;
inline bool pairt::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pairt::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pairt::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pairt::clear_vid() {
  vid_ = GOOGLE_LONGLONG(0);
  clear_has_vid();
}
inline ::google::protobuf::int64 pairt::vid() const {
  // @@protoc_insertion_point(field_get:stradsvm.pairt.vid)
  return vid_;
}
inline void pairt::set_vid(::google::protobuf::int64 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.pairt.vid)
}

// required double value = 2;
inline bool pairt::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pairt::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pairt::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pairt::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline double pairt::value() const {
  // @@protoc_insertion_point(field_get:stradsvm.pairt.value)
  return value_;
}
inline void pairt::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.pairt.value)
}

// optional double pg = 3;
inline bool pairt::has_pg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void pairt::set_has_pg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void pairt::clear_has_pg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void pairt::clear_pg() {
  pg_ = 0;
  clear_has_pg();
}
inline double pairt::pg() const {
  // @@protoc_insertion_point(field_get:stradsvm.pairt.pg)
  return pg_;
}
inline void pairt::set_pg(double value) {
  set_has_pg();
  pg_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.pairt.pg)
}

// -------------------------------------------------------------------

// triplepair

// required int64 vid = 1;
inline bool triplepair::has_vid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void triplepair::set_has_vid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void triplepair::clear_has_vid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void triplepair::clear_vid() {
  vid_ = GOOGLE_LONGLONG(0);
  clear_has_vid();
}
inline ::google::protobuf::int64 triplepair::vid() const {
  // @@protoc_insertion_point(field_get:stradsvm.triplepair.vid)
  return vid_;
}
inline void triplepair::set_vid(::google::protobuf::int64 value) {
  set_has_vid();
  vid_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.triplepair.vid)
}

// required double wspdot = 2;
inline bool triplepair::has_wspdot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void triplepair::set_has_wspdot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void triplepair::clear_has_wspdot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void triplepair::clear_wspdot() {
  wspdot_ = 0;
  clear_has_wspdot();
}
inline double triplepair::wspdot() const {
  // @@protoc_insertion_point(field_get:stradsvm.triplepair.wspdot)
  return wspdot_;
}
inline void triplepair::set_wspdot(double value) {
  set_has_wspdot();
  wspdot_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.triplepair.wspdot)
}

// required double spspdot = 3;
inline bool triplepair::has_spspdot() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void triplepair::set_has_spspdot() {
  _has_bits_[0] |= 0x00000004u;
}
inline void triplepair::clear_has_spspdot() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void triplepair::clear_spspdot() {
  spspdot_ = 0;
  clear_has_spspdot();
}
inline double triplepair::spspdot() const {
  // @@protoc_insertion_point(field_get:stradsvm.triplepair.spspdot)
  return spspdot_;
}
inline void triplepair::set_spspdot(double value) {
  set_has_spspdot();
  spspdot_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.triplepair.spspdot)
}

// -------------------------------------------------------------------

// bcwmsg

// required int32 src = 1;
inline bool bcwmsg::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void bcwmsg::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void bcwmsg::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void bcwmsg::clear_src() {
  src_ = 0;
  clear_has_src();
}
inline ::google::protobuf::int32 bcwmsg::src() const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.src)
  return src_;
}
inline void bcwmsg::set_src(::google::protobuf::int32 value) {
  set_has_src();
  src_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.bcwmsg.src)
}

// optional int64 maxfeat = 2;
inline bool bcwmsg::has_maxfeat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void bcwmsg::set_has_maxfeat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void bcwmsg::clear_has_maxfeat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void bcwmsg::clear_maxfeat() {
  maxfeat_ = GOOGLE_LONGLONG(0);
  clear_has_maxfeat();
}
inline ::google::protobuf::int64 bcwmsg::maxfeat() const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.maxfeat)
  return maxfeat_;
}
inline void bcwmsg::set_maxfeat(::google::protobuf::int64 value) {
  set_has_maxfeat();
  maxfeat_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.bcwmsg.maxfeat)
}

// optional int64 samples = 3;
inline bool bcwmsg::has_samples() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void bcwmsg::set_has_samples() {
  _has_bits_[0] |= 0x00000004u;
}
inline void bcwmsg::clear_has_samples() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void bcwmsg::clear_samples() {
  samples_ = GOOGLE_LONGLONG(0);
  clear_has_samples();
}
inline ::google::protobuf::int64 bcwmsg::samples() const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.samples)
  return samples_;
}
inline void bcwmsg::set_samples(::google::protobuf::int64 value) {
  set_has_samples();
  samples_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.bcwmsg.samples)
}

// repeated .stradsvm.pairt newpairs = 4;
inline int bcwmsg::newpairs_size() const {
  return newpairs_.size();
}
inline void bcwmsg::clear_newpairs() {
  newpairs_.Clear();
}
inline const ::stradsvm::pairt& bcwmsg::newpairs(int index) const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.newpairs)
  return newpairs_.Get(index);
}
inline ::stradsvm::pairt* bcwmsg::mutable_newpairs(int index) {
  // @@protoc_insertion_point(field_mutable:stradsvm.bcwmsg.newpairs)
  return newpairs_.Mutable(index);
}
inline ::stradsvm::pairt* bcwmsg::add_newpairs() {
  // @@protoc_insertion_point(field_add:stradsvm.bcwmsg.newpairs)
  return newpairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt >&
bcwmsg::newpairs() const {
  // @@protoc_insertion_point(field_list:stradsvm.bcwmsg.newpairs)
  return newpairs_;
}
inline ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt >*
bcwmsg::mutable_newpairs() {
  // @@protoc_insertion_point(field_mutable_list:stradsvm.bcwmsg.newpairs)
  return &newpairs_;
}

// repeated .stradsvm.pairt oldpairs = 5;
inline int bcwmsg::oldpairs_size() const {
  return oldpairs_.size();
}
inline void bcwmsg::clear_oldpairs() {
  oldpairs_.Clear();
}
inline const ::stradsvm::pairt& bcwmsg::oldpairs(int index) const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.oldpairs)
  return oldpairs_.Get(index);
}
inline ::stradsvm::pairt* bcwmsg::mutable_oldpairs(int index) {
  // @@protoc_insertion_point(field_mutable:stradsvm.bcwmsg.oldpairs)
  return oldpairs_.Mutable(index);
}
inline ::stradsvm::pairt* bcwmsg::add_oldpairs() {
  // @@protoc_insertion_point(field_add:stradsvm.bcwmsg.oldpairs)
  return oldpairs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt >&
bcwmsg::oldpairs() const {
  // @@protoc_insertion_point(field_list:stradsvm.bcwmsg.oldpairs)
  return oldpairs_;
}
inline ::google::protobuf::RepeatedPtrField< ::stradsvm::pairt >*
bcwmsg::mutable_oldpairs() {
  // @@protoc_insertion_point(field_mutable_list:stradsvm.bcwmsg.oldpairs)
  return &oldpairs_;
}

// repeated .stradsvm.triplepair result = 6;
inline int bcwmsg::result_size() const {
  return result_.size();
}
inline void bcwmsg::clear_result() {
  result_.Clear();
}
inline const ::stradsvm::triplepair& bcwmsg::result(int index) const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.result)
  return result_.Get(index);
}
inline ::stradsvm::triplepair* bcwmsg::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:stradsvm.bcwmsg.result)
  return result_.Mutable(index);
}
inline ::stradsvm::triplepair* bcwmsg::add_result() {
  // @@protoc_insertion_point(field_add:stradsvm.bcwmsg.result)
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::stradsvm::triplepair >&
bcwmsg::result() const {
  // @@protoc_insertion_point(field_list:stradsvm.bcwmsg.result)
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::stradsvm::triplepair >*
bcwmsg::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:stradsvm.bcwmsg.result)
  return &result_;
}

// optional double wterm = 7;
inline bool bcwmsg::has_wterm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void bcwmsg::set_has_wterm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void bcwmsg::clear_has_wterm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void bcwmsg::clear_wterm() {
  wterm_ = 0;
  clear_has_wterm();
}
inline double bcwmsg::wterm() const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.wterm)
  return wterm_;
}
inline void bcwmsg::set_wterm(double value) {
  set_has_wterm();
  wterm_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.bcwmsg.wterm)
}

// required int32 type = 8;
inline bool bcwmsg::has_type() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void bcwmsg::set_has_type() {
  _has_bits_[0] |= 0x00000080u;
}
inline void bcwmsg::clear_has_type() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void bcwmsg::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 bcwmsg::type() const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.type)
  return type_;
}
inline void bcwmsg::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:stradsvm.bcwmsg.type)
}

// repeated double mwsp = 9 [packed = true];
inline int bcwmsg::mwsp_size() const {
  return mwsp_.size();
}
inline void bcwmsg::clear_mwsp() {
  mwsp_.Clear();
}
inline double bcwmsg::mwsp(int index) const {
  // @@protoc_insertion_point(field_get:stradsvm.bcwmsg.mwsp)
  return mwsp_.Get(index);
}
inline void bcwmsg::set_mwsp(int index, double value) {
  mwsp_.Set(index, value);
  // @@protoc_insertion_point(field_set:stradsvm.bcwmsg.mwsp)
}
inline void bcwmsg::add_mwsp(double value) {
  mwsp_.Add(value);
  // @@protoc_insertion_point(field_add:stradsvm.bcwmsg.mwsp)
}
inline const ::google::protobuf::RepeatedField< double >&
bcwmsg::mwsp() const {
  // @@protoc_insertion_point(field_list:stradsvm.bcwmsg.mwsp)
  return mwsp_;
}
inline ::google::protobuf::RepeatedField< double >*
bcwmsg::mutable_mwsp() {
  // @@protoc_insertion_point(field_mutable_list:stradsvm.bcwmsg.mwsp)
  return &mwsp_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stradsvm

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_lasso_2eproto__INCLUDED
