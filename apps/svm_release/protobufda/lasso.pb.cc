// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: lasso.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "lasso.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace stradsvm {

namespace {

const ::google::protobuf::Descriptor* pairt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pairt_reflection_ = NULL;
const ::google::protobuf::Descriptor* triplepair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  triplepair_reflection_ = NULL;
const ::google::protobuf::Descriptor* bcwmsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  bcwmsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_lasso_2eproto() {
  protobuf_AddDesc_lasso_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "lasso.proto");
  GOOGLE_CHECK(file != NULL);
  pairt_descriptor_ = file->message_type(0);
  static const int pairt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pairt, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pairt, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pairt, pg_),
  };
  pairt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pairt_descriptor_,
      pairt::default_instance_,
      pairt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pairt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pairt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pairt));
  triplepair_descriptor_ = file->message_type(1);
  static const int triplepair_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triplepair, vid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triplepair, wspdot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triplepair, spspdot_),
  };
  triplepair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      triplepair_descriptor_,
      triplepair::default_instance_,
      triplepair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triplepair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(triplepair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(triplepair));
  bcwmsg_descriptor_ = file->message_type(2);
  static const int bcwmsg_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, maxfeat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, samples_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, newpairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, oldpairs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, wterm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, mwsp_),
  };
  bcwmsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      bcwmsg_descriptor_,
      bcwmsg::default_instance_,
      bcwmsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(bcwmsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(bcwmsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_lasso_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pairt_descriptor_, &pairt::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    triplepair_descriptor_, &triplepair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    bcwmsg_descriptor_, &bcwmsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_lasso_2eproto() {
  delete pairt::default_instance_;
  delete pairt_reflection_;
  delete triplepair::default_instance_;
  delete triplepair_reflection_;
  delete bcwmsg::default_instance_;
  delete bcwmsg_reflection_;
}

void protobuf_AddDesc_lasso_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013lasso.proto\022\010stradsvm\"/\n\005pairt\022\013\n\003vid\030"
    "\001 \002(\003\022\r\n\005value\030\002 \002(\001\022\n\n\002pg\030\003 \001(\001\":\n\ntrip"
    "lepair\022\013\n\003vid\030\001 \002(\003\022\016\n\006wspdot\030\002 \002(\001\022\017\n\007s"
    "pspdot\030\003 \002(\001\"\322\001\n\006bcwmsg\022\013\n\003src\030\001 \002(\005\022\017\n\007"
    "maxfeat\030\002 \001(\003\022\017\n\007samples\030\003 \001(\003\022!\n\010newpai"
    "rs\030\004 \003(\0132\017.stradsvm.pairt\022!\n\010oldpairs\030\005 "
    "\003(\0132\017.stradsvm.pairt\022$\n\006result\030\006 \003(\0132\024.s"
    "tradsvm.triplepair\022\r\n\005wterm\030\007 \001(\001\022\014\n\004typ"
    "e\030\010 \002(\005\022\020\n\004mwsp\030\t \003(\001B\002\020\001", 345);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "lasso.proto", &protobuf_RegisterTypes);
  pairt::default_instance_ = new pairt();
  triplepair::default_instance_ = new triplepair();
  bcwmsg::default_instance_ = new bcwmsg();
  pairt::default_instance_->InitAsDefaultInstance();
  triplepair::default_instance_->InitAsDefaultInstance();
  bcwmsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_lasso_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_lasso_2eproto {
  StaticDescriptorInitializer_lasso_2eproto() {
    protobuf_AddDesc_lasso_2eproto();
  }
} static_descriptor_initializer_lasso_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int pairt::kVidFieldNumber;
const int pairt::kValueFieldNumber;
const int pairt::kPgFieldNumber;
#endif  // !_MSC_VER

pairt::pairt()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stradsvm.pairt)
}

void pairt::InitAsDefaultInstance() {
}

pairt::pairt(const pairt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stradsvm.pairt)
}

void pairt::SharedCtor() {
  _cached_size_ = 0;
  vid_ = GOOGLE_LONGLONG(0);
  value_ = 0;
  pg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pairt::~pairt() {
  // @@protoc_insertion_point(destructor:stradsvm.pairt)
  SharedDtor();
}

void pairt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pairt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pairt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pairt_descriptor_;
}

const pairt& pairt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lasso_2eproto();
  return *default_instance_;
}

pairt* pairt::default_instance_ = NULL;

pairt* pairt::New() const {
  return new pairt;
}

void pairt::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pairt*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(vid_, pg_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pairt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stradsvm.pairt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 vid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // required double value = 2;
      case 2: {
        if (tag == 17) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_pg;
        break;
      }

      // optional double pg = 3;
      case 3: {
        if (tag == 25) {
         parse_pg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pg_)));
          set_has_pg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stradsvm.pairt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stradsvm.pairt)
  return false;
#undef DO_
}

void pairt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stradsvm.pairt)
  // required int64 vid = 1;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->vid(), output);
  }

  // required double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // optional double pg = 3;
  if (has_pg()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->pg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stradsvm.pairt)
}

::google::protobuf::uint8* pairt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stradsvm.pairt)
  // required int64 vid = 1;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->vid(), target);
  }

  // required double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // optional double pg = 3;
  if (has_pg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->pg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stradsvm.pairt)
  return target;
}

int pairt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vid());
    }

    // required double value = 2;
    if (has_value()) {
      total_size += 1 + 8;
    }

    // optional double pg = 3;
    if (has_pg()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pairt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pairt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pairt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pairt::MergeFrom(const pairt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_pg()) {
      set_pg(from.pg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pairt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pairt::CopyFrom(const pairt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pairt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pairt::Swap(pairt* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(value_, other->value_);
    std::swap(pg_, other->pg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pairt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pairt_descriptor_;
  metadata.reflection = pairt_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int triplepair::kVidFieldNumber;
const int triplepair::kWspdotFieldNumber;
const int triplepair::kSpspdotFieldNumber;
#endif  // !_MSC_VER

triplepair::triplepair()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stradsvm.triplepair)
}

void triplepair::InitAsDefaultInstance() {
}

triplepair::triplepair(const triplepair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stradsvm.triplepair)
}

void triplepair::SharedCtor() {
  _cached_size_ = 0;
  vid_ = GOOGLE_LONGLONG(0);
  wspdot_ = 0;
  spspdot_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

triplepair::~triplepair() {
  // @@protoc_insertion_point(destructor:stradsvm.triplepair)
  SharedDtor();
}

void triplepair::SharedDtor() {
  if (this != default_instance_) {
  }
}

void triplepair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* triplepair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return triplepair_descriptor_;
}

const triplepair& triplepair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lasso_2eproto();
  return *default_instance_;
}

triplepair* triplepair::default_instance_ = NULL;

triplepair* triplepair::New() const {
  return new triplepair;
}

void triplepair::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<triplepair*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(vid_, spspdot_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool triplepair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stradsvm.triplepair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 vid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vid_)));
          set_has_vid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_wspdot;
        break;
      }

      // required double wspdot = 2;
      case 2: {
        if (tag == 17) {
         parse_wspdot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wspdot_)));
          set_has_wspdot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_spspdot;
        break;
      }

      // required double spspdot = 3;
      case 3: {
        if (tag == 25) {
         parse_spspdot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &spspdot_)));
          set_has_spspdot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stradsvm.triplepair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stradsvm.triplepair)
  return false;
#undef DO_
}

void triplepair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stradsvm.triplepair)
  // required int64 vid = 1;
  if (has_vid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->vid(), output);
  }

  // required double wspdot = 2;
  if (has_wspdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->wspdot(), output);
  }

  // required double spspdot = 3;
  if (has_spspdot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->spspdot(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stradsvm.triplepair)
}

::google::protobuf::uint8* triplepair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stradsvm.triplepair)
  // required int64 vid = 1;
  if (has_vid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->vid(), target);
  }

  // required double wspdot = 2;
  if (has_wspdot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->wspdot(), target);
  }

  // required double spspdot = 3;
  if (has_spspdot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->spspdot(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stradsvm.triplepair)
  return target;
}

int triplepair::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 vid = 1;
    if (has_vid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vid());
    }

    // required double wspdot = 2;
    if (has_wspdot()) {
      total_size += 1 + 8;
    }

    // required double spspdot = 3;
    if (has_spspdot()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void triplepair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const triplepair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const triplepair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void triplepair::MergeFrom(const triplepair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_vid()) {
      set_vid(from.vid());
    }
    if (from.has_wspdot()) {
      set_wspdot(from.wspdot());
    }
    if (from.has_spspdot()) {
      set_spspdot(from.spspdot());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void triplepair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void triplepair::CopyFrom(const triplepair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool triplepair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void triplepair::Swap(triplepair* other) {
  if (other != this) {
    std::swap(vid_, other->vid_);
    std::swap(wspdot_, other->wspdot_);
    std::swap(spspdot_, other->spspdot_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata triplepair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = triplepair_descriptor_;
  metadata.reflection = triplepair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int bcwmsg::kSrcFieldNumber;
const int bcwmsg::kMaxfeatFieldNumber;
const int bcwmsg::kSamplesFieldNumber;
const int bcwmsg::kNewpairsFieldNumber;
const int bcwmsg::kOldpairsFieldNumber;
const int bcwmsg::kResultFieldNumber;
const int bcwmsg::kWtermFieldNumber;
const int bcwmsg::kTypeFieldNumber;
const int bcwmsg::kMwspFieldNumber;
#endif  // !_MSC_VER

bcwmsg::bcwmsg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:stradsvm.bcwmsg)
}

void bcwmsg::InitAsDefaultInstance() {
}

bcwmsg::bcwmsg(const bcwmsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:stradsvm.bcwmsg)
}

void bcwmsg::SharedCtor() {
  _cached_size_ = 0;
  src_ = 0;
  maxfeat_ = GOOGLE_LONGLONG(0);
  samples_ = GOOGLE_LONGLONG(0);
  wterm_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bcwmsg::~bcwmsg() {
  // @@protoc_insertion_point(destructor:stradsvm.bcwmsg)
  SharedDtor();
}

void bcwmsg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void bcwmsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* bcwmsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return bcwmsg_descriptor_;
}

const bcwmsg& bcwmsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_lasso_2eproto();
  return *default_instance_;
}

bcwmsg* bcwmsg::default_instance_ = NULL;

bcwmsg* bcwmsg::New() const {
  return new bcwmsg;
}

void bcwmsg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<bcwmsg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 199) {
    ZR_(maxfeat_, samples_);
    ZR_(src_, type_);
    wterm_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  newpairs_.Clear();
  oldpairs_.Clear();
  result_.Clear();
  mwsp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool bcwmsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:stradsvm.bcwmsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 src = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &src_)));
          set_has_src();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_maxfeat;
        break;
      }

      // optional int64 maxfeat = 2;
      case 2: {
        if (tag == 16) {
         parse_maxfeat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &maxfeat_)));
          set_has_maxfeat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_samples;
        break;
      }

      // optional int64 samples = 3;
      case 3: {
        if (tag == 24) {
         parse_samples:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &samples_)));
          set_has_samples();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_newpairs;
        break;
      }

      // repeated .stradsvm.pairt newpairs = 4;
      case 4: {
        if (tag == 34) {
         parse_newpairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_newpairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_newpairs;
        if (input->ExpectTag(42)) goto parse_oldpairs;
        break;
      }

      // repeated .stradsvm.pairt oldpairs = 5;
      case 5: {
        if (tag == 42) {
         parse_oldpairs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oldpairs()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_oldpairs;
        if (input->ExpectTag(50)) goto parse_result;
        break;
      }

      // repeated .stradsvm.triplepair result = 6;
      case 6: {
        if (tag == 50) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_result;
        if (input->ExpectTag(57)) goto parse_wterm;
        break;
      }

      // optional double wterm = 7;
      case 7: {
        if (tag == 57) {
         parse_wterm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wterm_)));
          set_has_wterm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_type;
        break;
      }

      // required int32 type = 8;
      case 8: {
        if (tag == 64) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_mwsp;
        break;
      }

      // repeated double mwsp = 9 [packed = true];
      case 9: {
        if (tag == 74) {
         parse_mwsp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_mwsp())));
        } else if (tag == 73) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74, input, this->mutable_mwsp())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:stradsvm.bcwmsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:stradsvm.bcwmsg)
  return false;
#undef DO_
}

void bcwmsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:stradsvm.bcwmsg)
  // required int32 src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->src(), output);
  }

  // optional int64 maxfeat = 2;
  if (has_maxfeat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->maxfeat(), output);
  }

  // optional int64 samples = 3;
  if (has_samples()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->samples(), output);
  }

  // repeated .stradsvm.pairt newpairs = 4;
  for (int i = 0; i < this->newpairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->newpairs(i), output);
  }

  // repeated .stradsvm.pairt oldpairs = 5;
  for (int i = 0; i < this->oldpairs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->oldpairs(i), output);
  }

  // repeated .stradsvm.triplepair result = 6;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->result(i), output);
  }

  // optional double wterm = 7;
  if (has_wterm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->wterm(), output);
  }

  // required int32 type = 8;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->type(), output);
  }

  // repeated double mwsp = 9 [packed = true];
  if (this->mwsp_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mwsp_cached_byte_size_);
  }
  for (int i = 0; i < this->mwsp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->mwsp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:stradsvm.bcwmsg)
}

::google::protobuf::uint8* bcwmsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:stradsvm.bcwmsg)
  // required int32 src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->src(), target);
  }

  // optional int64 maxfeat = 2;
  if (has_maxfeat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->maxfeat(), target);
  }

  // optional int64 samples = 3;
  if (has_samples()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->samples(), target);
  }

  // repeated .stradsvm.pairt newpairs = 4;
  for (int i = 0; i < this->newpairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->newpairs(i), target);
  }

  // repeated .stradsvm.pairt oldpairs = 5;
  for (int i = 0; i < this->oldpairs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->oldpairs(i), target);
  }

  // repeated .stradsvm.triplepair result = 6;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->result(i), target);
  }

  // optional double wterm = 7;
  if (has_wterm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->wterm(), target);
  }

  // required int32 type = 8;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->type(), target);
  }

  // repeated double mwsp = 9 [packed = true];
  if (this->mwsp_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _mwsp_cached_byte_size_, target);
  }
  for (int i = 0; i < this->mwsp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->mwsp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:stradsvm.bcwmsg)
  return target;
}

int bcwmsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->src());
    }

    // optional int64 maxfeat = 2;
    if (has_maxfeat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->maxfeat());
    }

    // optional int64 samples = 3;
    if (has_samples()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->samples());
    }

    // optional double wterm = 7;
    if (has_wterm()) {
      total_size += 1 + 8;
    }

    // required int32 type = 8;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .stradsvm.pairt newpairs = 4;
  total_size += 1 * this->newpairs_size();
  for (int i = 0; i < this->newpairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->newpairs(i));
  }

  // repeated .stradsvm.pairt oldpairs = 5;
  total_size += 1 * this->oldpairs_size();
  for (int i = 0; i < this->oldpairs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->oldpairs(i));
  }

  // repeated .stradsvm.triplepair result = 6;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }

  // repeated double mwsp = 9 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->mwsp_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _mwsp_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void bcwmsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const bcwmsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const bcwmsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void bcwmsg::MergeFrom(const bcwmsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  newpairs_.MergeFrom(from.newpairs_);
  oldpairs_.MergeFrom(from.oldpairs_);
  result_.MergeFrom(from.result_);
  mwsp_.MergeFrom(from.mwsp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_maxfeat()) {
      set_maxfeat(from.maxfeat());
    }
    if (from.has_samples()) {
      set_samples(from.samples());
    }
    if (from.has_wterm()) {
      set_wterm(from.wterm());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void bcwmsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bcwmsg::CopyFrom(const bcwmsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bcwmsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000081) != 0x00000081) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->newpairs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->oldpairs())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->result())) return false;
  return true;
}

void bcwmsg::Swap(bcwmsg* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(maxfeat_, other->maxfeat_);
    std::swap(samples_, other->samples_);
    newpairs_.Swap(&other->newpairs_);
    oldpairs_.Swap(&other->oldpairs_);
    result_.Swap(&other->result_);
    std::swap(wterm_, other->wterm_);
    std::swap(type_, other->type_);
    mwsp_.Swap(&other->mwsp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata bcwmsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = bcwmsg_descriptor_;
  metadata.reflection = bcwmsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace stradsvm

// @@protoc_insertion_point(global_scope)
